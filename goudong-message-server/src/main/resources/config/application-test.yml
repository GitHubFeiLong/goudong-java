logging:
  config: classpath:log4j2/log4j2-test.xml
  level:
    ROOT: INFO
    com.goudong: DEBUG

server:
  port: 10002
  servlet:
    context-path: /api/message # 访问应用统一前缀
spring:
  application:
    name: goudong-message-server
  mvc:
    throw-exception-if-no-handler-found: true #出现错误时, 直接抛出异常
  resources:
    add-mappings: false #工程中的资源文件建立映射
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.74.128:8848 # nacos服务集群
      config:
        server-addr: 192.168.74.128:8848 # nacos服务集群
        file-extension: yml # 配置中心的data-id后缀 （properties | yml）
  # json日期格式化
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.74.128:3306/goudong_message?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&createDatabaseIfNotExist=true
    username: ${MYSQL_USERNAME}
    password: "${MYSQL_PASSWORD}"
  ## Redis
  redis:
    password: "${REDIS_PASSWORD}"
    timeout: 3000
    sentinel:
      master: mymaster
      nodes:
        - 192.168.74.128:26379
        - 192.168.74.128:26380
        - 192.168.74.128:26381
    lettuce:
      pool:
        max-active: 100 # 连接池最大连接数（使用负值表示没有限制）
        max-idle: 100 # 连接池中的最大空闲连接
        min-idle: 50 # 连接池中的最小空闲连接
        max-wait: 6000 # 连接池最大阻塞等待时间（使用负值表示没有限制）

  #############
  # rabbitMQ
  ##############
  rabbitmq:
    host: 192.168.74.128  # mq ip地址
    port: 5672 # 端口 默认5672
    username: ${RABBITMQ_USERNAME} # 用户名
    password: ${RABBITMQ_PASSWORD} # 密码
    virtual-host: /goudong-host
    # 开启ACK
    listener:
      direct:
        acknowledge-mode: manual
        retry:
          enabled: true # 是否支持重试
      simple:
        acknowledge-mode: manual
        retry:
          enabled: true # 是否支持重试
    publisher-confirm-type: simple # 开启发送确认
    publisher-returns: true #开启发送失败退回
    template:
      mandatory: true

  ##############
  # 发送邮件配置 #
  #############
  mail:
    host: smtp.qq.com
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    port: 587 #端口号465或587
    protocol: smtp
    default-encoding: UTF-8
    smtp:
      connectiontimeout: 5000
      timeout: 3000
      writetimeout: 5000

  ## flyway数据迁移
  flyway:
    #是否开启
    enabled: false
    baseline-version: 0
    baseline-on-migrate: true
    table: goudong_message_server_flyway_schema_history


mybatis-plus:
  #  mapper-locations: classpath:mapper/*.xml
  mapper-locations: classpath*:/mapper/*.xml #其他包的也能扫描到
  type-aliases-package: com.goudong.commons.po
  # 以下配置均有默认值,可以不设置
  global-config:
    db-config:
      logic-delete-field: deleted #配置逻辑删除，也可以在字段上加注解 @TableLogic(value = "0",delval = "1")
      logic-delete-value: 1 # 删除1
      logic-not-delete-value: 0
      #主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: assign_id
      #字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"
      field-strategy: NOT_EMPTY
      #数据库类型
      db-type: MYSQL
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  # mybatis使用分页插件
  pagehelper:
    helperDialect: mysql
    reasonable: true
    supportMethodsArguments: true
    params: count=countSql

knife4j:
  enable: true         # 是否开启Knife4j增强模式，默认值为false
  production: false    # 生产环境开启
  basic:
    enable: true       # BasicHttp功能，默认为false
    username: knife4j    # 用户名
    password: knife4j   # 密码
  setting:             # 前端Ui的个性化配置属性
    enableDebug: true # 启用调试，默认为true 无效

# 配置commons
########################################################################################################################
commons:
  # 配置白名单
  whitelist:
    enable: true
    sleep: 15
    failure-retry-num: 5
  # 配置api资源
  api-resource:
    enable: false

# 配置message
########################################################################################################################
message:
  alibaba:
    message:
      accessKeyId: ${ALIBABA_MESSAGE_ACCESS_KEY_ID}
      accessKeySecret: ${ALIBABA_MESSAGE_ACCESS_KEY_SECRET}
      signName: ${ALIBABA_MESSAGE_SIGN_NAME}
      templateCode: ${ALIBABA_MESSAGE_TEMPLATE_CODE}



