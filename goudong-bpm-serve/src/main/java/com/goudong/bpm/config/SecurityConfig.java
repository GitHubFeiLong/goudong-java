package com.goudong.bpm.config;import com.goudong.bpm.filter.BpmAuthenticationFilter;import com.goudong.commons.filter.UserContextFilter;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.context.SecurityContextPersistenceFilter;/** * SpringSecurity配置 * Created by macro on 2019/10/8. */@Slf4j@EnableWebSecurity@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true) // 开启方法注解权限配置public class SecurityConfig extends WebSecurityConfigurerAdapter {    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }    @Override    public void configure(HttpSecurity http) throws Exception {        /*            因为使用security的原因，只能在这之前加         */        // 添加过滤器        http.addFilterAfter(new BpmAuthenticationFilter(), SecurityContextPersistenceFilter.class);        http.addFilterBefore(new UserContextFilter(), BpmAuthenticationFilter.class);        // 禁用csrf防御机制(跨域请求伪造)，这么做在测试和开发会比较方便。        http.csrf().disable();    }}