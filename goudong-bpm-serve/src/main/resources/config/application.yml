logging:
  config: classpath:log4j2/log4j2-dev.xml
  level:
    ROOT: INFO
    com.goudong.bpm: DEBUG
    com.goudong: DEBUG
server:
  port: 10005
  servlet:
    context-path: /api/bpm
# project manifest path
project:
  manifest:
    file:
      path: classpath:/default-project.json
spring:
  profiles:
#    active: dev #默认使用开发环境
  main:
    allow-bean-definition-overriding: true #重命名其中一个 bean 或启用覆盖
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false #工程中的资源文件建立映射
  application:
    name: goudong-bpm-server #微服务名
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848 # nacos服务集群
  activiti:
    #1.flase：默认值。activiti在启动时，对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常
    #2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建
    #3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）
    #4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
    database-schema-update: true
    #检测历史表是否存在 activiti7默认没有开启数据库历史记录 启动数据库历史记录
    db-history-used: true
    #记录历史等级 可配置的历史级别有none, activity, audit, full
    #none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。
    #activity：级别高于none，保存流程实例与流程行为，其他数据不保存。
    #audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。audit为history的默认值。
    #full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。
    history-level: full
    #校验流程文件，默认校验resources下的processes文件夹里的流程文件
    check-process-definitions: false
    # 关闭 SpringAutoDeployment
    deployment-mode:  never-fail
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/goudong_bpm?nullCatalogMeansCurrent=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&createDatabaseIfNotExist=true
    username: ${MYSQL_USERNAME}
    password: "${MYSQL_PASSWORD}"
#    password: "l(=8gp_04h*&"
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置监控服务器
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: admin
        reset-enable: false
        url-pattern: /druid/*
        # 添加IP白名单
        #allow:
        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
        #deny:
      web-stat-filter:
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
  redis:
    database: 0   # Redis数据库索引（默认为0）
    host: 127.0.0.1 # Redis服务器地址
    port: 6379
    password: ${REDIS_PASSWORD}
    timeout: 3000

  ## flyway数据迁移
  flyway:
    #是否开启,没有文件时关闭
    enabled: false
    baseline-version: 0
    baseline-on-migrate: true
    table: goudong_bpm_server_flyway_schema_history

# redisson配置
redisson:
  password: ${spring.redis.password}
  singleServerConfig:
    address: ${spring.redis.host}:${spring.redis.port}
ribbon:
  ReadTimeout: 5000 #建立连接所用时间（避免超时）
  ConnectTimeout: 5000 #连接后接口调用时间（避免超时）

knife4j:
  enable: true         # 是否开启Knife4j增强模式，默认值为false
  production: false    # 生产环境开启
  basic:
    enable: true       # BasicHttp功能，默认为false
    username: knife4j  # 用户名
    password: knife4j  # 密码
  setting:             # 前端Ui的个性化配置属性
    enableDebug: true  # 启用调试，默认为true 无效